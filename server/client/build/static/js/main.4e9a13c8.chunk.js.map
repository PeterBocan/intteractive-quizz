{"version":3,"sources":["ActionTypes.js","StateButton.js","SwitchPanel.js","AnswerPanel.js","Editor.js","GateEditor.js","App.js","serviceWorker.js","Reducer.js","index.js"],"names":["addAnswer","answer","type","removeAnswer","addAllAnswers","answers","editQuestion","question","toggleEdit","edit","fetchData","dispatch","fetch","method","cache","redirect","referrerPolicy","headers","then","response","data","json","catch","e","console","log","sendData","body","JSON","stringify","postDataRequest","error","StateButton","props","state","selected","changeState","bind","sel","this","setState","onStateChanged","onClick","className","isSelected","label","React","Component","SwitchPanel","selectAnswer","key","allAnswers","map","text","renderAnswers","connect","answerId","select","Actions","AnswerPanel","isAnswer","editAnswer","deleteAnswer","markAsAnswer","event","newAnswer","Object","assign","target","value","defaultValue","onKeyUp","selectedAnswers","Editor","renderQuestionAnswers","captureQuestion","handleSave","editMode","Math","random","toString","onAddAnswer","id","length","onEditQuestion","saveQuestion","Fragment","placeholder","onKeyPress","numberOfCorrectAnswers","onEditStoreAnswers","onDeleteAnswer","message","a","msgUint8","TextEncoder","encode","crypto","subtle","digest","hashBuffer","hashArray","Array","from","Uint8Array","b","padStart","join","GateEditor","unlock","unlockedSite","updateMagic","sha256digest","result","unlockSite","onUnlock","children","App","displayMessage","pass","evaluateAnswer","hideMessage","fetchQuestionaire","isCorrect","forEach","selectedAnswer","find","item","undefined","image","alt","buttonLabel","src","style","textAlign","paddingTop","aria-label","disabled","displayEditor","displayQuestion","ReactRedux","Boolean","window","location","hostname","match","initialState","unlockedQuestionaire","persistConfig","storage","persistedReducer","persistReducer","action","obj","index","findIndex","newState","filter","push","composeEnhancer","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","persistor","persistStore","render","loading","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"8SAwCO,SAASA,EAAUC,GACtB,MAAO,CAAEC,KAxCa,aAwCKD,UAOxB,SAASE,EAAaF,GACzB,MAAO,CAAEC,KA9CgB,gBA8CKD,UAO3B,SAASG,EAAcC,GAC1B,MAAO,CAAEH,KAvDkB,kBAuDKG,WAG7B,SAASC,EAAaC,GACzB,MAAO,CAAEL,KAxDgB,gBAwDKK,YAG3B,SAASC,EAAWC,GACvB,MAAO,CAAEP,KAvDc,cAuDKO,QAezB,SAASC,IACZ,OAAO,SAACC,GAjEDC,MAAM,GAAD,OAHD,qBAGC,aAAuB,CAC/BC,OAAQ,MACRC,MAAO,WACPC,SAAU,SACVC,eAAgB,cAChBC,QAAS,CACL,8BAA+B,OA6D9BC,MAAK,SAAAC,GAAQ,OAAIR,EAVnB,CAAET,KAlEa,aAkEKkB,KAUgBD,EAASE,YAC3CC,OAAM,SAAAC,GAAC,OAAIC,QAAQC,IAAIF,OAI7B,SAASG,EAASN,GACrB,OAAO,SAACT,GACJ,OA/DR,SAAyBS,GACnB,OAAOR,MAAM,GAAD,OAfH,qBAeG,iCAA2C,CACrDC,OAAQ,OACRC,MAAO,WACPG,QAAS,CACL,OAAU,mBACV,eAAgB,mBAChB,8BAA+B,KAEnCU,KAAMC,KAAKC,UAAUT,KAsDdU,CAAgBV,GAClBF,MAAK,SAACC,GAAD,OAAcR,EAdrB,CAAET,KArEY,iBAoFZoB,OAAM,SAAAC,GAAC,OAAIC,QAAQO,MAAMR,O,ICzFjBS,E,YAMjB,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KALVC,MAAQ,CACJC,UAAU,GAKV,EAAKC,YAAc,EAAKA,YAAYC,KAAjB,gBAFJ,E,2EAMf,IAAMC,GAAOC,KAAKL,MAAMC,SACzBI,KAAKC,SAAS,CAAEL,SAAUG,IACtBC,KAAKN,MAAMQ,gBACXF,KAAKN,MAAMQ,eAAeH,K,mCAK7B,OAAOC,KAAKL,MAAMC,W,+BAKlB,OACE,4BAAQO,QAASH,KAAKH,YAAaO,UAAYJ,KAAKK,aAC3C,2CAA6C,iCACjDL,KAAKN,MAAMY,W,GA5BeC,IAAMC,WCEzCC,E,YAEF,WAAYf,GAAQ,IAAD,8BACf,4CAAMA,KACDgB,aAAe,EAAKA,aAAaZ,KAAlB,gBAFL,E,0EAKNpC,EAAQkC,GAClBI,KAAKN,MAAMgB,aAAahD,EAAOiD,IAAKf,K,sCAGtB,IAAD,OACZ,OAAOI,KAAKN,MAAMkB,WAAWC,KAAI,SAACnD,GAC9B,OACI,yBAAKiD,IAAKjD,EAAOiD,IAAKP,UAAU,yBAC5B,kBAAC,EAAD,CAAaE,MAAO5C,EAAOoD,KAAMZ,eAAgB,SAACN,GAAD,OAAc,EAAKc,aAAahD,EAAQkC,Y,+BAOrG,OACI,yBAAKQ,UAAU,wBACVJ,KAAKe,qB,GAxBIR,IAAMC,WA0CjBQ,mBANf,SAA0BrB,GACvB,MAAO,CACHiB,WAAYjB,EAAMiB,eARD,SAACxC,GACrB,MAAO,CACHsC,aAAc,SAACO,EAAUC,GAAX,OAAsB9C,EFerC,SAAsBV,EAAQwD,GACjC,MAAO,CAAEvD,KAjDgB,gBAiDKD,SAAQwD,UEhBWC,CAAqBF,EAAUC,QAUrEF,CAA0CP,G,QC3ClDW,E,YAOH,WAAY1B,GAAQ,IAAD,8BACf,4CAAMA,KANVC,MAAQ,CACJ0B,UAAU,EACV3D,OAAQ,IAKR,EAAK4D,WAAa,EAAKA,WAAWxB,KAAhB,gBAClB,EAAKyB,aAAe,EAAKA,aAAazB,KAAlB,gBACpB,EAAK0B,aAAe,EAAKA,aAAa1B,KAAlB,gBACpB,EAAKH,MAAM0B,SAAW,EAAK3B,MAAMhC,OAAO2D,SACxC,EAAK1B,MAAMjC,OAAS,EAAKgC,MAAMhC,OANhB,E,wEASR+D,GACP,IAAIC,EAAYC,OAAOC,OAAO,GAAI5B,KAAKN,MAAMhC,QAC7CgE,EAAUZ,KAAOW,EAAMI,OAAOC,MAC9B9B,KAAKN,MAAM4B,WAAWI,GACtB1B,KAAKC,SAAS,CAAEvC,OAAQgE,M,qCAIxB1B,KAAKN,MAAM6B,aAAavB,KAAKN,MAAMhC,U,qCAInC,IAAIgE,EAAS,eAAO1B,KAAKL,MAAMjC,QAC/BgE,EAAUL,UAAYK,EAAUL,SAChCpC,QAAQC,IAAIwC,GACZ1B,KAAKN,MAAM4B,WAAWI,GACtB1B,KAAKC,SAAS,CAAEoB,UAAU,M,+BAK1B,IAAM3D,EAASsC,KAAKN,MAAMhC,OAE1B,OACI,uBAAK0C,UAAU,UACX,uBAAKA,UAAU,oBACX,uBAAKA,UAAU,wBACX,yBAAOzC,KAAK,OAAOoE,aAAc,GAAKrE,EAAOoD,KAAMV,UAAW,SAAWJ,KAAKL,MAAM0B,SAAU,cAAgB,IAAKW,QAAShC,KAAKsB,cAErI,uBAAKlB,UAAU,WACX,0BAAQA,UAAW,UAAYJ,KAAKL,MAAM0B,SAAU,cAAgB,IAAKlB,QAASH,KAAKwB,cACnF,wBAAMpB,UAAU,iBACZ,qBAAGA,UAAW,gBAAkBJ,KAAKL,MAAM0B,SAAU,cAAgB,SAIjF,uBAAKjB,UAAU,WACX,0BAAQA,UAAU,SAASD,QAASH,KAAKuB,cACrC,wBAAMnB,UAAU,iBACZ,qBAAGA,UAAU,0B,GAvDlBG,aAoFZS,mBAnBd,SAAyBrB,GACtB,MAAO,CACHiB,WAAYjB,EAAMiB,WAClBqB,gBAAiBtC,EAAMsC,oBAI9B,SAA4B7D,GACxB,MAAO,CACJkD,WAAY,SAAA5D,GACRU,EHnCL,SAAoBV,GACvB,MAAO,CAAEC,KAvCc,cAuCKD,UGkCXyD,CAAmBzD,KAG/B6D,aAAc,SAAA7D,GACXU,EAAS+C,EAAqBzD,QAK3BsD,CAA6CI,GCnFtDc,E,YAEF,WAAYxC,GAAQ,IAAD,8BACf,4CAAMA,KACDyC,sBAAwB,EAAKA,sBAAsBrC,KAA3B,gBAC7B,EAAK7B,WAAa,EAAKA,WAAW6B,KAAhB,gBAClB,EAAKrC,UAAY,EAAKA,UAAUqC,KAAf,gBACjB,EAAKsC,gBAAkB,EAAKA,gBAAgBtC,KAArB,gBACvB,EAAKuC,WAAa,EAAKA,WAAWvC,KAAhB,gBANH,E,0EAUfE,KAAKN,MAAMzB,YAAY+B,KAAKN,MAAM4C,Y,8CAIlC,OAAOtC,KAAKN,MAAMkB,WAAWC,KAAI,SAACnD,GAC9B,OAAO,kBAAC,EAAD,CAAaA,OAAQA,EAAQiD,IAAKjD,EAAOiD,W,kCAKpD,IAAIA,GAAqB,KAAd4B,KAAKC,UAAeC,SAAS,IACxCzC,KAAKN,MAAMgD,YAAY,CAAEC,GAAI3C,KAAKN,MAAMkB,WAAWgC,OAAQ9B,KAAM,GAAIO,UAAU,EAAOV,U,sCAG1E3B,GACZgB,KAAKN,MAAMmD,eAAe7D,EAAE6C,OAAOC,S,mCAInC9B,KAAKN,MAAMoD,aAAa9C,KAAKN,MAAMC,S,+BAG7B,IAAD,OACL,OACI,kBAAC,IAAMoD,SAAP,KACI,yBAAK3C,UAAU,WACX,yBAAKA,UAAU,UAAf,KACA,yBAAKA,UAAU,wBAAf,KACA,yBAAKA,UAAU,UACX,4BAAQA,UAAU,iBAAiBD,QAASH,KAAK/B,YAC7C,uBAAGmC,UAAU,qBAAb,QAKZ,yBAAKA,UAAU,WACX,yBAAKA,UAAU,UAAf,KACA,yBAAKA,UAAU,wBACX,yBAAKA,UAAU,SACX,2BAAOA,UAAU,SAAjB,UACA,yBAAKA,UAAU,WACX,2BAAOA,UAAU,QACbzC,KAAK,OACLqF,YAAY,SACZjB,aAAc/B,KAAKN,MAAM1B,SACzBiF,WAAYjD,KAAKoC,qBAKjC,yBAAKhC,UAAU,UAAf,MAGJ,yBAAKA,UAAU,WACX,yBAAKA,UAAU,UAAf,KACA,yBAAKA,UAAU,wBACX,wCAEJ,yBAAKA,UAAU,UAAf,MAGJ,yBAAKA,UAAU,WACX,yBAAKA,UAAU,UAAf,KACA,yBAAKA,UAAU,wBACX,yBAAKA,UAAU,wBACVJ,KAAKmC,0BAGd,yBAAK/B,UAAU,UAAf,MAEJ,yBAAKA,UAAU,WACX,yBAAKA,UAAU,UAAf,KACA,yBAAKA,UAAU,wBACX,4BAAQD,QAASH,KAAKvC,WAClB,0BAAM2C,UAAU,iBACZ,uBAAGA,UAAU,yBAIzB,yBAAKA,UAAU,UAAf,MAEJ,yBAAKA,UAAU,WACX,yBAAKA,UAAU,wBAAf,KACA,yBAAKA,UAAU,UAAf,KACA,yBAAKA,UAAU,UACX,4BAAQA,UAAU,uCAAuCD,QAAS,kBAAM,EAAKkC,eAA7E,e,GAjGH9B,IAAMC,WA6IZQ,mBAlCf,SAAyBrB,GACrB,MAAO,CACH2C,SAAU3C,EAAM2C,SAChB1B,WAAYjB,EAAMiB,WAClBqB,gBAAiBtC,EAAMsC,gBACvBjE,SAAU2B,EAAM3B,SAChBkF,uBAAwBvD,EAAMuD,uBAC9BvD,MAAOA,MAIf,SAA4BvB,GACxB,MAAO,CACH+E,mBAAoB,SAAArF,GAChBM,EAAS+C,EAAsBrD,KAEnC4E,YAAa,SAAAhF,GACTU,EAAS+C,EAAkBzD,KAE/B0F,eAAgB,SAAAT,GACZvE,EAAS+C,EAAqBwB,KAElCE,eAAgB,SAAA7E,GACZI,EAAS+C,EAAqBnD,KAElCC,WAAY,SAAAC,GACRE,EAAS+C,EAAmBjD,KAEhC4E,aAAc,SAACjE,GACXT,EAAS+C,EAAiBtC,QAKvBmC,CAA6CkB,G,qEC3I5D,WAA4BmB,GAA5B,mBAAAC,EAAA,6DACUC,GAAW,IAAIC,aAAcC,OAAOJ,GAD9C,SAE6BK,OAAOC,OAAOC,OAAO,UAAWL,GAF7D,cAEUM,EAFV,OAGUC,EAAYC,MAAMC,KAAK,IAAIC,WAAWJ,IAHhD,kBAIWC,EAAUjD,KAAI,SAAAqD,GAAC,OAAIA,EAAEzB,SAAS,IAAI0B,SAAS,EAAG,QAAMC,KAAK,KAJpE,4C,0BAOMC,E,YAIF,WAAY3E,GAAQ,IAAD,8BACf,4CAAMA,KAHVC,MAAQ,CAAE2E,QAAQ,GAId,EAAK3E,MAAM2E,OAAS,EAAK5E,MAAM6E,aAC/B,EAAKC,YAAc,EAAKA,YAAY1E,KAAjB,gBACnB,EAAKG,SAAW,EAAKA,SAASH,KAAd,gBAJD,E,yEAOP2B,GAAQ,IAAD,Q,4CACfgD,CAAahD,EAAMI,OAAOC,OAAOnD,MAAK,SAAA+F,GArBhC,qEAsBEA,IACA,EAAKhF,MAAMiF,aACX,EAAK1E,SAAS,CAAEqE,QAAQ,U,+BAMhC,OAAItE,KAAKL,MAAM2E,QACXtE,KAAKN,MAAMkF,WAEP,6BACK5E,KAAKN,MAAMmF,WAKhB,kBAAC,IAAM9B,SAAP,KACI,6BACA,yBAAK3C,UAAU,WACX,yBAAKA,UAAU,UAAf,KACA,yBAAKA,UAAU,wBACX,sDAA8B,6BAC9B,yBAAKA,UAAU,oBACX,yBAAKA,UAAU,wBACX,2BAAOA,UAAU,QAAQzC,KAAK,OAAOqE,QAAShC,KAAKwE,iBAI/D,yBAAKpE,UAAU,UAAf,W,GA1CCG,IAAMC,WAkEhBQ,mBAZf,SAAyBrB,GACrB,MAAO,CACH4E,aAAc5E,EAAMgF,eAI5B,SAA4BvG,GACxB,MAAO,CACJuG,WAAY,kBAAMvG,ELPd,CAAET,KA1Dc,oBKqEZqD,CAA6CqD,GCxEtDS,E,YAOF,WAAYpF,GAAQ,IAAD,8BACf,4CAAMA,KANVC,MAAQ,CACJoF,gBAAgB,EAChBC,MAAM,GAKN,EAAKzD,aAAe,EAAKA,aAAazB,KAAlB,gBACpB,EAAKmF,eAAiB,EAAKA,eAAenF,KAApB,gBACtB,EAAKiF,eAAiB,EAAKA,eAAejF,KAApB,gBACtB,EAAKoF,YAAc,EAAKA,YAAYpF,KAAjB,gBACnB,EAAK7B,WAAa,EAAKA,WAAW6B,KAAhB,gBAClB,EAAKqF,kBAAoB,EAAKA,kBAAkBrF,KAAvB,gBAPV,E,0EAWfE,KAAKN,MAAMzB,YAAY+B,KAAKN,MAAM4C,Y,sCAIlC,OACG,kBAAC,EAAD,Q,mCAIMK,GACT3C,KAAKN,MAAM0D,eAAeT,K,oCAI1B3C,KAAKC,SAAS,CAAE8E,gBAAgB,M,uCAGlB,IAAD,OACb,GAA0C,IAAtC/E,KAAKN,MAAMwD,uBAAf,CAIA,IAAIkC,GAAY,EACZpF,KAAKN,MAAMuC,gBAAgBW,SAAW5C,KAAKN,MAAMwD,uBACjDlD,KAAKN,MAAMuC,gBAAgBoD,SAAQ,SAACC,GACpC,IAAM5H,EAAS,EAAKgC,MAAMkB,WAAW2E,MAAK,SAACC,GAAD,OAAUF,IAAmBE,EAAK7E,YACzD8E,IAAX/H,GAAyBA,EAAO2D,WAChC+D,GAAY,MAIpBA,GAAY,EAEhBpF,KAAKC,SAAS,CAAE8E,gBAAgB,EAAMC,KAAMI,O,uCAI5C,IACIM,EAAOC,EAAKC,EAWhB,OAZa5F,KAAKL,MAAMqF,MAGpBU,EAAQ,oBACRC,EAAM,cACNC,EAAc,SAEdF,EAAQ,mBACRC,EAAM,QACNC,EAAc,aAId,yBAAKxF,UAAU,mBACX,yBAAKA,UAAU,oBAAf,KACA,yBAAKA,UAAU,iBACX,uBAAGA,UAAU,iBACT,yBAAKyF,IAAKH,EAAOC,IAAKA,KAE1B,yBAAKG,MAAO,CAAEC,UAAW,SAAUC,WAAY,KAC3C,4BAAQ5F,UAAU,6BAA6BD,QAASH,KAAKkF,aAA7D,IAA4EU,EAA5E,OAGR,4BAAQxF,UAAU,uBAAuBD,QAASH,KAAKkF,YAAae,aAAW,SAA/E,Q,wCAMR,IAAMC,EAAWlG,KAAKN,MAAMwD,uBAAyB,EAAI,UAAY,cACrE,OACI,kBAAC,IAAMH,SAAP,KACK/C,KAAKL,MAAMoF,eAAiB/E,KAAK+E,iBAAmB,GACrD,yBAAK3E,UAAU,WACX,yBAAKA,UAAU,UAAf,KACA,yBAAKA,UAAU,wBACX,wBAAIA,UAAU,4BAAd,QACA,wBAAIA,UAAU,4BAA4BJ,KAAKN,MAAM1B,WAEzD,yBAAKoC,UAAU,UAAf,MAGJ,yBAAKA,UAAU,WACX,yBAAKA,UAAU,UAAf,KACA,yBAAKA,UAAU,wBACX,kBAAC,EAAD,CAAatC,QAASkC,KAAKN,MAAMkB,cAErC,yBAAKR,UAAU,UAAf,MAGJ,yBAAKA,UAAU,wBACX,yBAAKA,UAAU,UAAf,KACA,yBAAKA,UAAU,wBACX,4BAAQA,UAAU,qDAAqDD,QAASH,KAAK/B,YACjF,0BAAMmC,UAAU,iBACZ,uBAAGA,UAAU,wBAGrB,4BAAQA,UAAS,0CAAqC8F,GAC9C/F,QAASH,KAAKiF,gBADtB,aAKJ,yBAAK7E,UAAU,UAAf,S,0CAOZe,M,+BAGM,IAAD,OACL,OACI,kBAAC,EAAD,CAAYyD,SAAU,kBAAM,EAAKO,sBAC7B,6BAAS/E,UAAU,eACdJ,KAAKN,MAAM4C,SAAUtC,KAAKmG,gBAAkBnG,KAAKoG,kBAElD,yBAAKhG,UAAU,uBACX,yBAAKA,UAAU,UAAf,KACA,yBAAKA,UAAU,wBAAf,Y,GAxING,IAAMC,WA8KT6F,WA9Bf,SAAyB1G,GACrB,MAAO,CACH2C,SAAU3C,EAAM2C,SAChB1B,WAAYjB,EAAMiB,WAClBqB,gBAAiBtC,EAAMsC,gBACvBjE,SAAU2B,EAAM3B,SAChBkF,uBAAwBvD,EAAMuD,2BAItC,SAA4B9E,GACxB,MAAO,CACH+E,mBAAoB,SAAArF,GAChBM,EAAS+C,EAAsBrD,KAEnC4E,YAAa,SAAAhF,GACTU,EAAS+C,EAAkBzD,KAE/B0F,eAAgB,SAAAT,GACZvE,EAAS+C,EAAqBwB,KAElCE,eAAgB,SAAA7E,GACZI,EAAS+C,EAAqBnD,KAElCC,WAAY,SAAAC,GACRE,EAAS+C,EAAmBjD,QAKzBmI,CAAwDvB,GC1KnDwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,mBCNAC,EAAe,CACjB/F,WAAY,GACZqB,gBAAiB,GACjBjE,SAAU,GACVsE,UAAU,EACVY,uBAAwB,EACxB0D,sBAAsB,G,6CCJpBC,EAAgB,CAClBlG,IAAK,OACLmG,aAGAC,EAAmBC,YAAeH,GDE/B,WAAgD,IAA/BlH,EAA8B,uDAAtBgH,EAAcM,EAAQ,uCAClD,QAAexB,IAAXwB,EACA,OAAOtH,EAEX,OAAOsH,EAAOtJ,MACV,IRzBkB,aQ0Bd,IAAIuJ,EAAM,CACNtG,WAAW,GAAD,mBAAMjB,EAAMiB,YAAZ,CAAwBqG,EAAOvJ,SACzCwF,uBAAwB+D,EAAOvJ,OAAO2D,SAAU1B,EAAMuD,uBAAyB,EAAIvD,EAAMuD,wBAE7F,OAAOvB,OAAOC,OAAO,GAAIjC,EAAOuH,GAGpC,IR5BmB,cQ6Bf,IAAIC,EAAQxH,EAAMiB,WAAWwG,WAAU,SAAC1J,GAAD,OAAYA,EAAOiF,KAAOsE,EAAOvJ,OAAOiF,MAC/EhD,EAAMiB,WAAWuG,GAASxF,OAAOC,OAAO,GAAIjC,EAAMiB,WAAWuG,GAAQF,EAAOvJ,QAC5E,IAAIwJ,EAAM,CACNtG,WAAYjB,EAAMiB,WAClBsC,uBAAwB+D,EAAOvJ,OAAO2D,SAAU1B,EAAMuD,uBAAyB,EAAIvD,EAAMuD,wBAE7F,OAAOvB,OAAOC,OAAO,GAAIjC,EAAOuH,GAGpC,IRzCqB,gBQ0CjB,IAAMG,EAAW,CACbzG,WAAYjB,EAAMiB,WAAW0G,QAAO,SAAC5J,GAAD,OAAYuJ,EAAOvJ,OAAOiD,MAAQjD,EAAOiD,OAC7EsB,gBAAiBtC,EAAMsC,gBAAgBqF,QAAO,SAAC5J,GAAD,OAAYuJ,EAAOvJ,OAAOiD,MAAQjD,EAAOiD,QAE3F,OAAOgB,OAAOC,OAAO,GAAIjC,EAAO0H,GAGpC,IRhDqB,gBQiDjB,IAAIvJ,EAAU,GAOd,OANsB,IAAlBmJ,EAAO/F,OACPpD,EAAU6B,EAAMsC,gBAAgBqF,QAAO,SAAC5J,GAAD,OAAYA,IAAWuJ,EAAOvJ,WAErEI,EAAUiG,MAAMC,KAAKrE,EAAMsC,kBACnBsF,KAAKN,EAAOvJ,QAEjBiE,OAAOC,OAAO,GAAIjC,EAAO,CAACsC,gBAAiBnE,IAGtD,IR1DqB,gBQ2DjB,IAAIE,EAAWiJ,EAAOjJ,SACtB,OAAO2D,OAAOC,OAAQ,GAAIjC,EAAO,CAAC3B,aAGtC,IR1DmB,cQ2Df,OAAO2D,OAAOC,OAAO,GAAIjC,EAAO,CAAE2C,SAAU2E,EAAO/I,OAGvD,IR7DmB,cQ8Df,OAAOyD,OAAOC,OAAO,GAAIjC,EAAO,CAAEiH,sBAAsB,IAG5D,IRrEkB,aQsEd,OAAOjF,OAAOC,OAAQ,GAAIjC,GAG9B,IRxEiB,YQ4EjB,QACI,OAAOA,MCjEb6H,EAAkBjB,OAAOkB,sCAAwCC,IAEnEC,EAAQC,YAAYb,EACpBS,EAAgBK,YAAgBC,OAEhCC,EAAYC,YAAaL,GAE7BM,iBACI,kBAAC,IAAD,CAAUN,MAAOA,GACb,kBAAC,IAAD,CAAaO,QAAS,KAAMH,UAAWA,GACpC,kBAAC,EAAD,QAGPI,SAASC,eAAe,SFkGtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM5J,MAAK,SAAA6J,GACjCA,EAAaC,kB","file":"static/js/main.4e9a13c8.chunk.js","sourcesContent":["\nexport const ADD_ANSWER = \"ADD_ANSWER\";\nexport const ADD_ALL_ANSWERS = \"ADD_ALL_ANSWERS\";\nexport const REMOVE_ANSWER = \"REMOVE_ANSWER\";\nexport const SELECT_ANSWER = \"SELECT_ANSWER\";\nexport const EDIT_QUESTION = \"EDIT_QUESTION\";\nexport const EDIT_ANSWER = \"EDIT_ANSWER\";\nexport const FETCH_DATA = \"FETCH_DATA\";\nexport const POST_DATA = \"POST_DATA\";\n\nexport const ACTION_EDIT = \"ACTION_EDIT\";\nexport const UNLOCK_SITE = \"UNLOCK_SITE\";\n\nconst domain = \"https://pbocan.net\";\n\nfunction dataLoadRequest() {\n    return fetch(`${domain}/question`, {\n        method: \"GET\",\n        cache: \"no-cache\",\n        redirect: \"follow\",\n        referrerPolicy: \"no-referrer\",\n        headers: {\n            \"Access-Control-Allow-Origin\": \"*\"\n        }\n    });\n}\n\nfunction postDataRequest(data) {\n      return fetch(`${domain}/question?token=saveSomething`, {\n        method: \"POST\",\n        cache: \"no-cache\",\n        headers: {\n            \"Accept\": \"application/json\",\n            \"Content-Type\": \"application/json\",\n            \"Access-Control-Allow-Origin\": \"*\"\n        },\n        body: JSON.stringify(data)\n    });\n}\n\nexport function addAnswer(answer) {\n    return { type: ADD_ANSWER, answer };\n}\n\nexport function editAnswer(answer) {\n    return { type: EDIT_ANSWER, answer };\n}\n\nexport function removeAnswer(answer) {\n    return { type: REMOVE_ANSWER, answer };\n}\n\nexport function selectAnswer(answer, select) {\n    return { type: SELECT_ANSWER, answer, select };\n}\n\nexport function addAllAnswers(answers) {\n    return { type: ADD_ALL_ANSWERS, answers };\n}\n\nexport function editQuestion(question) {\n    return { type: EDIT_QUESTION, question };\n}\n\nexport function toggleEdit(edit) {\n    return { type: ACTION_EDIT, edit };\n}\n\nexport function unlockSite() {\n    return { type: UNLOCK_SITE };\n}\n\nexport function getData(data) {\n    return { type: FETCH_DATA, data };\n}\n\nexport function postData() {\n    return { type: POST_DATA };\n}\n\nexport function fetchData() {\n    return (dispatch) => {\n         dataLoadRequest()\n            .then(response => dispatch(getData(response.json())))\n            .catch(e => console.log(e));\n    }\n}\n\nexport function sendData(data) {\n    return (dispatch) => {\n        return postDataRequest(data)\n            .then((response) => dispatch(postData()))\n            .catch(e => console.error(e));\n    }\n}","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport default class StateButton extends React.Component\n{\n    state = {\n        selected: false\n    };\n\n    constructor(props) {\n        super(props);\n        this.changeState = this.changeState.bind(this);\n    }\n\n    changeState() {\n        const sel = !this.state.selected;\n       this.setState({ selected: sel });\n       if (this.props.onStateChanged) {\n           this.props.onStateChanged(sel);\n       }\n    }\n\n    isSelected() {\n        return this.state.selected;\n    }\n\n    render()\n    {\n        return (\n          <button onClick={this.changeState} className={(this.isSelected())?\n                   \"button is-large is-primary answer-button\" : \"button is-large answer-button\"}>\n              {this.props.label}\n          </button>\n        );\n    }\n}\n\nStateButton.propTypes = {\n  label: PropTypes.string.isRequired,\n    onStateChanged: PropTypes.func\n};\n\n","import React from 'react';\nimport StateButton from \"./StateButton\";\nimport { connect } from \"react-redux\";\nimport * as Actions from \"./ActionTypes\";\n\nclass SwitchPanel extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.selectAnswer = this.selectAnswer.bind(this);\n    }\n\n    selectAnswer(answer, selected) {\n       this.props.selectAnswer(answer.key, selected);\n    }\n\n    renderAnswers() {\n        return this.props.allAnswers.map((answer) => {\n            return (\n                <div key={answer.key} className=\"column is-one-quarter\">\n                    <StateButton label={answer.text} onStateChanged={(selected) => this.selectAnswer(answer, selected)} />\n                </div>\n            );\n        });\n    }\n\n    render() {\n        return (\n            <div className=\"columns is-multiline\">\n                {this.renderAnswers()}\n            </div>\n        );\n    }\n}\n\nconst dispatchActions = (dispatch) => {\n    return {\n        selectAnswer: (answerId, select) => dispatch(Actions.selectAnswer(answerId, select))\n    };\n};\n\nfunction mapStateToProps (state) {\n   return {\n       allAnswers: state.allAnswers\n   };\n}\n\nexport default connect(mapStateToProps, dispatchActions)(SwitchPanel);\n","import * as React from \"react\";\nimport { connect } from 'react-redux';\nimport * as Actions from './ActionTypes';\n\n class AnswerPanel extends React.Component\n{\n    state = {\n        isAnswer: false,\n        answer: {}\n    };\n\n    constructor(props) {\n        super(props);\n        this.editAnswer = this.editAnswer.bind(this);\n        this.deleteAnswer = this.deleteAnswer.bind(this);\n        this.markAsAnswer = this.markAsAnswer.bind(this);\n        this.state.isAnswer = this.props.answer.isAnswer;\n        this.state.answer = this.props.answer;\n    }\n\n    editAnswer(event) {\n        let newAnswer = Object.assign({}, this.props.answer);\n        newAnswer.text = event.target.value;\n        this.props.editAnswer(newAnswer);\n        this.setState({ answer: newAnswer });\n    }\n\n    deleteAnswer() {\n        this.props.deleteAnswer(this.props.answer);\n    }\n\n    markAsAnswer() {\n        let newAnswer = {...this.state.answer};\n        newAnswer.isAnswer = !newAnswer.isAnswer;\n        console.log(newAnswer);\n        this.props.editAnswer(newAnswer);\n        this.setState({ isAnswer: true });\n    }\n\n    render()\n    {\n        const answer = this.props.answer;\n\n        return (\n            <div className=\"column\">\n                <div className=\"field has-addons\">\n                    <div className=\"control answer-input\">\n                        <input type=\"text\" defaultValue={\"\" + answer.text} className={\"input\" + (this.state.isAnswer? \" is-success\" : \"\")} onKeyUp={this.editAnswer} />\n                    </div>\n                    <div className=\"control\">\n                        <button className={\"button\" + (this.state.isAnswer? \" is-success\" : \"\")} onClick={this.markAsAnswer}>\n                            <span className=\"icon is-large\">\n                                <i className={\"fas fa-check\" + (this.state.isAnswer? \" is-success\" : \"\") } />\n                            </span>\n                        </button>\n                    </div>\n                    <div className=\"control\">\n                        <button className=\"button\" onClick={this.deleteAnswer}>\n                            <span className=\"icon is-large\">\n                                <i className=\"fas fa-minus\" />\n                            </span>\n                        </button>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\n function mapStateToProps(state) {\n    return {\n        allAnswers: state.allAnswers,\n        selectedAnswers: state.selectedAnswers\n    };\n }\n\n function mapDispatchToProps(dispatch) {\n     return {\n        editAnswer: answer => {\n            dispatch(Actions.editAnswer(answer));\n        },\n\n         deleteAnswer: answer => {\n            dispatch(Actions.removeAnswer(answer));\n         }\n     };\n }\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AnswerPanel);\n","import React from \"react\";\nimport AnswerPanel from \"./AnswerPanel\";\nimport { connect } from \"react-redux\";\nimport * as Actions from \"./ActionTypes\";\n\nclass Editor extends React.Component\n{\n    constructor(props) {\n        super(props);\n        this.renderQuestionAnswers = this.renderQuestionAnswers.bind(this);\n        this.toggleEdit = this.toggleEdit.bind(this);\n        this.addAnswer = this.addAnswer.bind(this);\n        this.captureQuestion = this.captureQuestion.bind(this);\n        this.handleSave = this.handleSave.bind(this);\n    }\n\n    toggleEdit() {\n        this.props.toggleEdit(!this.props.editMode);\n    }\n\n    renderQuestionAnswers() {\n        return this.props.allAnswers.map((answer) => {\n            return <AnswerPanel answer={answer} key={answer.key} />;\n        });\n    }\n\n    addAnswer() {\n        let key = (Math.random()*1e64).toString(30);\n        this.props.onAddAnswer({ id: this.props.allAnswers.length, text: \"\", isAnswer: false, key });\n    }\n\n    captureQuestion(e) {\n        this.props.onEditQuestion(e.target.value);\n    }\n\n    handleSave() {\n        this.props.saveQuestion(this.props.state);\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                <div className=\"columns\">\n                    <div className=\"column\"> </div>\n                    <div className=\"column is-two-thirds\"> </div>\n                    <div className=\"column\">\n                        <button className=\"button is-link\" onClick={this.toggleEdit}>\n                            <i className=\"icon fas fa-times\"> </i>\n                        </button>\n                    </div>\n                </div>\n\n                <div className=\"columns\">\n                    <div className=\"column\"> </div>\n                    <div className=\"column is-two-thirds\">\n                        <div className=\"field\">\n                            <label className=\"label\">Otazka</label>\n                            <div className=\"control\">\n                                <input className=\"input\"\n                                    type=\"text\"\n                                    placeholder=\"Otazka\"\n                                    defaultValue={this.props.question}\n                                    onKeyPress={this.captureQuestion}\n                                />\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"column\"> </div>\n                </div>\n\n                <div className=\"columns\">\n                    <div className=\"column\"> </div>\n                    <div className=\"column is-two-thirds\">\n                        <p>Odpovede</p>\n                    </div>\n                    <div className=\"column\"> </div>\n                </div>\n\n                <div className=\"columns\">\n                    <div className=\"column\"> </div>\n                    <div className=\"column is-two-thirds\">\n                        <div className=\"columns is-multiline\">\n                            {this.renderQuestionAnswers()}\n                        </div>\n                    </div>\n                    <div className=\"column\"> </div>\n                </div>\n                <div className=\"columns\">\n                    <div className=\"column\"> </div>\n                    <div className=\"column is-two-thirds\">\n                        <button onClick={this.addAnswer}>\n                            <span className=\"icon is-large\">\n                                <i className=\"fas fa-2x fa-plus\" />\n                            </span>\n                        </button>\n                    </div>\n                    <div className=\"column\"> </div>\n                </div>\n                <div className=\"columns\">\n                    <div className=\"column is-two-thirds\"> </div>\n                    <div className=\"column\"> </div>\n                    <div className=\"column\">\n                        <button className=\"button is-active is-primary is-large\" onClick={() => this.handleSave()}>\n                            Save\n                        </button>\n                    </div>\n                </div>\n            </React.Fragment>\n        );\n    }\n}\n\nfunction mapStateToProps(state) {\n    return {\n        editMode: state.editMode,\n        allAnswers: state.allAnswers,\n        selectedAnswers: state.selectedAnswers,\n        question: state.question,\n        numberOfCorrectAnswers: state.numberOfCorrectAnswers,\n        state: state\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        onEditStoreAnswers: answers => {\n            dispatch(Actions.addAllAnswers(answers));\n        },\n        onAddAnswer: answer => {\n            dispatch(Actions.addAnswer(answer));\n        },\n        onDeleteAnswer: id => {\n            dispatch(Actions.removeAnswer(id));\n        },\n        onEditQuestion: question => {\n            dispatch(Actions.editQuestion(question));\n        },\n        toggleEdit: edit => {\n            dispatch(Actions.toggleEdit(edit));\n        },\n        saveQuestion: (data) => {\n            dispatch(Actions.sendData(data));\n        }\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Editor);\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport * as Actions from \"./ActionTypes\";\nimport PropTypes from \"prop-types\";\n\nconst magic = \"9f86d081884c7d659a2feaa0c55ad015a3bf4f1b2b0b822cd15d6c15b0f00a08\";\n\nasync function sha256digest(message) {\n    const msgUint8 = new TextEncoder().encode(message);\n    const hashBuffer = await crypto.subtle.digest('SHA-256', msgUint8);\n    const hashArray = Array.from(new Uint8Array(hashBuffer));\n    return hashArray.map(b => b.toString(16).padStart(2, '0')).join('');\n}\n\nclass GateEditor extends React.Component\n{\n    state = { unlock: false };\n\n    constructor(props) {\n        super(props);\n        this.state.unlock = this.props.unlockedSite;\n        this.updateMagic = this.updateMagic.bind(this);\n        this.setState = this.setState.bind(this);\n    }\n\n    updateMagic(event) {\n        sha256digest(event.target.value).then(result => {\n            if (result === magic) {\n                this.props.unlockSite();\n                this.setState({ unlock: true });\n            }\n        });\n    }\n\n    render() {\n        if (this.state.unlock) {\n            this.props.onUnlock();\n            return (\n                <div>\n                    {this.props.children}\n                </div>\n            );\n        } else {\n            return (\n                <React.Fragment>\n                    <br />\n                    <div className=\"columns\">\n                        <div className=\"column\"> </div>\n                        <div className=\"column is-two-thirds\">\n                            <p>Please enter a password</p><br />\n                            <div className=\"field has-addons\">\n                                <div className=\"control answer-input\">\n                                    <input className=\"input\" type=\"text\" onKeyUp={this.updateMagic} />\n                                </div>\n                            </div>\n                        </div>\n                        <div className=\"column\"> </div>\n                    </div>\n                </React.Fragment>\n            );\n        }\n    }\n}\n\nGateEditor.propTypes = {\n    onUnlock: PropTypes.func\n};\n\nfunction mapStateToProps(state) {\n    return {\n        unlockedSite: state.unlockSite\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n       unlockSite: () => dispatch(Actions.unlockSite())\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(GateEditor);","import React from 'react';\nimport './App.css';\nimport * as ReactRedux from 'react-redux';\nimport * as Actions from './ActionTypes';\nimport SwitchPanel from \"./SwitchPanel\";\nimport Editor from \"./Editor\";\nimport GateEditor from \"./GateEditor\";\n\nclass App extends React.Component {\n\n    state = {\n        displayMessage: false,\n        pass: false\n    };\n\n    constructor(props) {\n        super(props);\n        this.deleteAnswer = this.deleteAnswer.bind(this);\n        this.evaluateAnswer = this.evaluateAnswer.bind(this);\n        this.displayMessage = this.displayMessage.bind(this);\n        this.hideMessage = this.hideMessage.bind(this);\n        this.toggleEdit = this.toggleEdit.bind(this);\n        this.fetchQuestionaire = this.fetchQuestionaire.bind(this);\n    }\n\n    toggleEdit() {\n        this.props.toggleEdit(!this.props.editMode);\n    }\n\n    displayEditor() {\n        return (\n           <Editor />\n        );\n    }\n\n    deleteAnswer(id) {\n        this.props.onDeleteAnswer(id);\n    }\n\n    hideMessage() {\n        this.setState({ displayMessage: false });\n    }\n\n    evaluateAnswer() {\n        if (this.props.numberOfCorrectAnswers === 0) {\n            return;\n        }\n\n        let isCorrect = true;\n        if (this.props.selectedAnswers.length === this.props.numberOfCorrectAnswers) {\n            this.props.selectedAnswers.forEach((selectedAnswer) => {\n            const answer = this.props.allAnswers.find((item) => selectedAnswer === item.key);\n                if (answer !== undefined && !answer.isAnswer) {\n                    isCorrect = false;\n                }\n            });\n        } else {\n            isCorrect = false;\n        }\n        this.setState({ displayMessage: true, pass: isCorrect });\n    }\n\n    displayMessage() {\n        const pass = this.state.pass;\n        let image, alt, buttonLabel;\n        if (pass) {\n            image = \"/success-baby.gif\";\n            alt = \"You did it!\";\n            buttonLabel = \"Done\";\n        } else {\n            image = \"/oh-hell-no.webp\";\n            alt = \"Nope.\";\n            buttonLabel = \"Try again\";\n        }\n\n        return (\n            <div className=\"modal is-active\">\n                <div className=\"modal-background\"> </div>\n                <div className=\"modal-content\">\n                    <p className=\"image is-4by3\">\n                        <img src={image} alt={alt} />\n                    </p>\n                    <div style={{ textAlign: \"center\", paddingTop: 20 }}>\n                        <button className=\"button is-primary is-large\" onClick={this.hideMessage}> {buttonLabel} </button>\n                    </div>\n                </div>\n                <button className=\"modal-close is-large\" onClick={this.hideMessage} aria-label=\"close\"> </button>\n            </div>\n        );\n    }\n\n    displayQuestion() {\n        const disabled = this.props.numberOfCorrectAnswers > 0 ? \"is-info\" : \"is-disabled\";\n        return (\n            <React.Fragment>\n                {this.state.displayMessage ? this.displayMessage() : \"\" }\n                <div className=\"columns\">\n                    <div className=\"column\"> </div>\n                    <div className=\"column is-two-thirds\">\n                        <h1 className=\"title is-1 has-text-left\">Kviz</h1>\n                        <h2 className=\"title is-2 has-text-left\">{this.props.question}</h2>\n                    </div>\n                    <div className=\"column\"> </div>\n                </div>\n\n                <div className=\"columns\">\n                    <div className=\"column\"> </div>\n                    <div className=\"column is-two-thirds\">\n                        <SwitchPanel answers={this.props.allAnswers} />\n                    </div>\n                    <div className=\"column\"> </div>\n                </div>\n\n                <div className=\"columns submit-panel\">\n                    <div className=\"column\"> </div>\n                    <div className=\"column is-two-thirds\">\n                        <button className=\"button is-link is-outlined is-large is-pulled-left\" onClick={this.toggleEdit}>\n                            <span className=\"icon is-large\">\n                                <i className=\"fas fa-2x fa-cogs\" />\n                            </span>\n                        </button>\n                        <button className={`button is-large is-pulled-right ${disabled}`}\n                                onClick={this.evaluateAnswer}>\n                            Vyhodnot\n                        </button>\n                    </div>\n                    <div className=\"column\"> </div>\n                </div>\n            </React.Fragment>\n        );\n    }\n\n    fetchQuestionaire() {\n        Actions.fetchData();\n    }\n\n    render() {\n        return (\n            <GateEditor onUnlock={() => this.fetchQuestionaire()}>\n                <section className=\"App section\">\n                    {this.props.editMode? this.displayEditor() : this.displayQuestion()}\n\n                    <div className=\"columns fixed-panel\">\n                        <div className=\"column\"> </div>\n                        <div className=\"column is-two-thirds\"> </div>\n                    </div>\n                </section>\n            </GateEditor>\n        );\n    }\n}\n\nfunction mapStateToProps(state) {\n    return {\n        editMode: state.editMode,\n        allAnswers: state.allAnswers,\n        selectedAnswers: state.selectedAnswers,\n        question: state.question,\n        numberOfCorrectAnswers: state.numberOfCorrectAnswers\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        onEditStoreAnswers: answers => {\n            dispatch(Actions.addAllAnswers(answers));\n        },\n        onAddAnswer: answer => {\n            dispatch(Actions.addAnswer(answer));\n        },\n        onDeleteAnswer: id => {\n            dispatch(Actions.removeAnswer(id));\n        },\n        onEditQuestion: question => {\n            dispatch(Actions.editQuestion(question));\n        },\n        toggleEdit: edit => {\n            dispatch(Actions.toggleEdit(edit));\n        },\n    };\n}\n\nexport default ReactRedux.connect(mapStateToProps, mapDispatchToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\n    ACTION_EDIT,\n    ADD_ANSWER,\n    EDIT_ANSWER,\n    EDIT_QUESTION,\n    SELECT_ANSWER,\n    REMOVE_ANSWER,\n    UNLOCK_SITE,\n    FETCH_DATA,\n    POST_DATA\n} from \"./ActionTypes\";\n\nconst initialState = {\n    allAnswers: [],\n    selectedAnswers: [],\n    question: \"\",\n    editMode: false,\n    numberOfCorrectAnswers: 0,\n    unlockedQuestionaire: false\n};\n\nexport function reducer(state = initialState, action) {\n    if (action === undefined) {\n        return state;\n    }\n    switch(action.type)  {\n        case ADD_ANSWER: {\n            let obj = {\n                allAnswers: [...state.allAnswers, action.answer],\n                numberOfCorrectAnswers: action.answer.isAnswer? state.numberOfCorrectAnswers + 1 : state.numberOfCorrectAnswers\n            };\n            return Object.assign({}, state, obj);\n        }\n\n        case EDIT_ANSWER: {\n            let index = state.allAnswers.findIndex((answer) => answer.id === action.answer.id);\n            state.allAnswers[index] = Object.assign({}, state.allAnswers[index], action.answer);\n            let obj = {\n                allAnswers: state.allAnswers,\n                numberOfCorrectAnswers: action.answer.isAnswer? state.numberOfCorrectAnswers + 1 : state.numberOfCorrectAnswers\n            };\n            return Object.assign({}, state, obj);\n        }\n\n        case REMOVE_ANSWER: {\n            const newState = {\n                allAnswers: state.allAnswers.filter((answer) => action.answer.key !== answer.key ),\n                selectedAnswers: state.selectedAnswers.filter((answer) => action.answer.key !== answer.key )\n            };\n            return Object.assign({}, state, newState);\n        }\n\n        case SELECT_ANSWER: {\n            let answers = [];\n            if (action.select === false) {\n                answers = state.selectedAnswers.filter((answer) => answer !== action.answer);\n            } else {\n                answers = Array.from(state.selectedAnswers);\n                answers.push(action.answer);\n            }\n            return Object.assign({}, state, {selectedAnswers: answers});\n        }\n\n        case EDIT_QUESTION: {\n            let question = action.question;\n            return Object.assign( {}, state, {question});\n        }\n\n        case ACTION_EDIT: {\n            return Object.assign({}, state, { editMode: action.edit });\n        }\n\n        case UNLOCK_SITE: {\n            return Object.assign({}, state, { unlockedQuestionaire: true });\n        }\n\n        case FETCH_DATA: {\n            return Object.assign( {}, state);\n        }\n\n        case POST_DATA: {\n            return state;\n        }\n\n        default:\n            return state;\n    }\n}","import React from 'react';\nimport { render } from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore, compose, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\nimport { reducer } from './Reducer';\nimport { persistStore, persistReducer } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nimport thunk from \"redux-thunk\";\n\nimport { PersistGate } from 'redux-persist/integration/react';\n\nconst persistConfig = {\n    key: 'root',\n    storage\n};\n\nlet persistedReducer = persistReducer(persistConfig, reducer);\nconst composeEnhancer = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nlet store = createStore(persistedReducer,\n    composeEnhancer(applyMiddleware(thunk))\n);\nlet persistor = persistStore(store);\n\nrender(\n    <Provider store={store}>\n        <PersistGate loading={null} persistor={persistor}>\n           <App />\n        </PersistGate>\n    </Provider>,\n    document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n"],"sourceRoot":""}